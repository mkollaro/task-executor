#!/usr/bin/env python
#
# Copyright (c) 2013 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#           http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Dynamically load a Python module, run taskrunner with a pipeline from it.

The task configurations (or pipelines, or a combination of them) specified on
the command line will be read from the dynamically loaded Python module, put
into a pipeline and executed by taskrunner.
"""

import imp
import logging
from copy import copy
from optparse import OptionParser

import taskrunner


logging.basicConfig(level=logging.INFO)


def parse_args():
    """Get positional arguments and options.

    Prints a help message if the arguments are incorrect.
    :returns: filepath, task_names, options
    """
    parser = OptionParser(usage="%prog FILEPATH TASKS [OPTIONS]")
    choices = ['always', 'never', 'pronto', 'on_success', 'on_failure']
    parser.add_option("-c", "--cleanup", dest="cleanup",
                      type="choice", choices=choices, default='always',
                      help="'always' - default behaviour;"
                           " 'never' - don't run the cleanups;"
                           " 'pronto' - only do the cleanups;"
                           " 'on_success' - only clean up if the run was OK;"
                           " 'on_failure' - only clean up if the run failed;")
    parser.add_option("-D", "--redefine", dest="redefine",
                      action="append",
                      help="Can be used multiple times. In the format"
                           " 'varname=newvalue' or"
                           " 'varname.keyname=newvalue', where"
                           " 'varname' is some variable/dictionary in the"
                           " python module that is being loaded,"
                           " 'keyname' is some key in it."
                           " You can use as many levels as you want (redefine"
                           " dictionaries inside dictionaries, etc).")

    options, positional_arguments = parser.parse_args()
    if len(positional_arguments) < 2:
        print "Not enough arguments"
        parser.print_help()
        exit(1)
    filepath = positional_arguments[0]
    task_names = positional_arguments[1:]

    return filepath, task_names, options


def import_python_file(filepath):
    """Return dynamically imported python source."""
    return imp.load_source("dynamically_imported", filepath)


def get_pipeline(definitions, var_names):
    """Get a list of task configurations from the definitions module.

    Find var_names in the definitions module and add them to the pipeline.
    :returns: a list of dictionaries (aka task configurations)
    """
    pipeline = []
    for name in var_names:
        var = vars(definitions)[name]
        if type(var) is list or type(var) is tuple:
            pipeline += var
        else:
            pipeline.append(var)
    return pipeline


def redefine_variables(definitions, redefinitions):
    """Using strings like 'varname=something', redefine vars in `definitions`.

    :param definitions: module in which the definitions will be rewritten
    :param redefinitions: list of strings in the format
        `varname=something`, or `varname.key=something` or
        `varname.key1.key2=something` where 'varname' is either a variable or a
        dictionary in the definitions. The last example would set
        `varname[key1]key2] = value`. You can use as many levels as you want
        to.
    """
    if not redefinitions:
        return
    for redef in redefinitions:
        parts = redef.split('=')
        if len(parts) != 2:
            raise Exception("Bad format of configuration redefinition,"
                            " there has to be exactly one '=' character.")
        value = parts[1]
        keys = parts[0].split('.')
        _set_deep(vars(definitions), keys, value)


def _set_deep(dictionary, keys, value):
    """Set value in a multidimensional dictionary with a list of keys.

    If len(keys) is 3, it will do the equivalent of:
        dictionary[key[0]][key[1]][key[2]] = value
    """
    keys = copy(keys)
    while len(keys) > 1:
        key = keys.pop(0)
        dictionary = dictionary[key]
    dictionary[keys[0]] = value


if __name__ == '__main__':
    filepath, task_names, options = parse_args()

    definitions = import_python_file(filepath)
    redefine_variables(definitions, options.redefine)
    pipeline = get_pipeline(definitions, task_names)

    taskrunner.execute(pipeline, cleanup=options.cleanup)
